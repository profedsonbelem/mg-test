service:
  name: utilsservices

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  mongoUrl: ${opt:mongoUrl}
  clientDataBucket: ${opt:clientDataBucket}
  senderEmail: ${opt:senderEmail}
  role: ${opt:role}
  cryptoKey: ${opt:cryptoKey}
  iv: ${opt:iv}
  secret: ${opt:secret}
  failedEmail: ${opt:failedEmail}
  resources: ${opt:resources}
  stage: ${opt:stage}
  jumioUserAgent: ${opt:jumioUserAgent}
  jumioRegion: ${opt:jumioRegion}
  jumioAuthorization: ${opt:jumioAuthorization}
  callbackUrl: ${opt:callbackUrl}
  emailBucket: ${opt:emailBucket}
  carAPIKey: ${opt:carAPIKey}
  questionnaireBucket: ${opt:questionnaireBucket}
  litifyAPIUrl: ${opt:litifyAPIUrl}
  restApiId: ${opt:restApiId}
  rootResourceId: ${opt:rootResourceId}
  attachmentsBucket: ${opt:attachmentsBucket}
  queueURL: ${opt:queueURL}
  configurationSet: ${opt:configurationSet}
  outBucket: ${opt:outBucket}
  SalesforceUrl: ${opt:SalesforceUrl}
  UsernameLitify: ${opt:UsernameLitify}
  PasswordLitify: ${opt:PasswordLitify}
  litifyClientId: ${opt:litifyClientId}
  litifyClientSecret: ${opt:litifyClientSecret}
  litifyRedirectUri: ${opt:litifyRedirectUri}
  litifyInstanceUrl: ${opt:litifyInstanceUrl}

provider:
  name: aws
  runtime: nodejs10.x
  timeout: 600
  versionFunctions: false
  role: ${self:custom.role}
  stage: ${self:custom.stage}
  apiGateway:
    restApiId: ${self:custom.restApiId}
    restApiRootResourceId: ${self:custom.rootResourceId}
  deploymentBucket:
    name: ${self:custom.outBucket}
  environment:
    mongoUrl: ${self:custom.mongoUrl}
    clientDataBucket: ${self:custom.clientDataBucket}
    senderEmail: ${self:custom.senderEmail}
    cryptoKey: ${self:custom.cryptoKey}
    iv: ${self:custom.iv}
    secret: ${self:custom.secret}
    failedEmail: ${self:custom.failedEmail}
    resources: ${self:custom.resources}
    jumioUserAgent: ${self:custom.jumioUserAgent}
    jumioRegion: ${self:custom.jumioRegion}
    jumioAuthorization: ${self:custom.jumioAuthorization}
    callbackUrl: ${self:custom.callbackUrl}
    emailBucket: ${self:custom.emailBucket}
    carAPIKey: ${self:custom.carAPIKey}
    questionnaireBucket: ${self:custom.questionnaireBucket}
    stage: ${self:custom.stage}
    litifyAPIUrl: ${self:custom.litifyAPIUrl}
    attachmentsBucket: ${self:custom.attachmentsBucket}
    queueURL: ${self:custom.queueURL}
    configurationSet: ${self:custom.configurationSet}
    SalesforceUrl: ${self:custom.SalesforceUrl}
    UsernameLitify: ${self:custom.UsernameLitify}
    PasswordLitify: ${self:custom.PasswordLitify}
    litifyClientId: ${self:custom.litifyClientId}
    litifyClientSecret: ${self:custom.litifyClientSecret}
    litifyRedirectUri: ${self:custom.litifyRedirectUri}
    litifyInstanceUrl: ${self:custom.litifyInstanceUrl}

functions:
  # Utils
  sendMail:
    handler: src/endpoints/sendEmail.sendMail
    events:
      - http:
          method: post
          path: utils/sendMail
          cors: true

  queueEmail:
    handler: src/endpoints/queueEmail.queueEmail
    events:
      - http:
          method: post
          path: utils/queueEmail
          cors: true

  sendSMS:
    handler: src/endpoints/sendSMS.sendSMS
    events:
      - http:
          method: post
          path: utils/sendSMS
          cors: true

  translateText:
    handler: src/endpoints/translate.translateText
    events:
      - http:
          method: post
          path: utils/translateText
          cors: true

  treatSendingError:
    handler: src/lambdas/treatSendingError.treatSendingError

  ## Token
  decrypt:
    handler: src/endpoints/crypto.decryptToken
    events:
      - http:
          method: get
          path: utils/crypto/descrypt/{token}
          cors: true

  validateToken:
    handler: src/endpoints/validateToken.validateToken
    events:
      - http:
          method: get
          path: utils/validateToken/{token}
          cors: true

  ## S3 Files
  getSignedUrl:
    handler: src/endpoints/S3Files.getSignedUrl
    events:
      - http:
          method: post
          path: utils/getSignedUrl
          cors: true

  ## Other
  cars:
    handler: src/endpoints/cars.searchRegistration
    events:
      - http:
          method: get
          path: utils/cars/{vrm}
          cors: true

  ukvdEnhancedData:
    handler: src/endpoints/cars.getUkvdEnhancedData
    events:
      - http:
          method: get
          path: utils/ukvdEnhancedData/{registration}
          cors: true

  emailAnswer:
    handler: src/endpoints/emailAnswer.getEmailAnswer
    events:
      - http:
          method: post
          path: utils/emailAnswer
          cors: true

  resendEmail:
    handler: src/endpoints/resendEmail.resendEmail
    events:
      - http:
          method: post
          path: utils/resendEmail
          cors: true

  ## Crud lambdas
  create:
    handler: src/endpoints/crud.create
    events:
      - http:
          method: post
          path: utils/{collection}/create
          cors: true

  retrieve:
    handler: src/endpoints/crud.retrieve
    events:
      - http:
          method: post
          path: utils/{collection}/retrieve
          cors: true

  retrieveById:
    handler: src/endpoints/crud.retrieveById
    events:
      - http:
          method: get
          path: utils/{collection}/retrieve-by-id/{_id}
          cors: true

  update:
    handler: src/endpoints/crud.update
    events:
      - http:
          method: post
          path: utils/{collection}/update
          cors: true

  delete:
    handler: src/endpoints/crud.deleteById
    events:
      - http:
          method: delete
          path: utils/{collection}/delete/{_id}
          cors: true

  count:
    handler: src/endpoints/crud.count
    events:
      - http:
          method: post
          path: utils/{collection}/count
          cors: true
